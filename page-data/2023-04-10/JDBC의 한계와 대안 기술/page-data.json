{"componentChunkName":"component---src-templates-post-template-tsx","path":"/2023-04-10/JDBC의 한계와 대안 기술/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<h1>JDBC</h1>\n<ul>\n<li>Java에서 RDBMS를 사용할 수 있게 해주는 API</li>\n<li>사용하려면 각 DBMS 벤더에서 제공하는 JDBC Driver가 필요하다.</li>\n</ul>\n<h2>JDBC는 왜 등장하게 되었는가?</h2>\n<ul>\n<li>DB를 다른 종류로 변경하게 되면 Application Server에 개발된 DB 사용 코드도 같이 변경해야 하는 문제</li>\n<li>DB마다 커넥션 연결, SQL 전달 등의 방법이 모두 다른 문제</li>\n</ul>\n<h2>JDBC의 한계</h2>\n<ul>\n<li>DB 변경시 JDBC 코드는 변경하지 않아도 된다.</li>\n<li>하지만 SQL은 해당 DB에 맞도록 변경해주어야 한다. (SQL은 일반적인 부분만 공통화했기 때문)</li>\n</ul>\n<h2>JDBC를 좀 더 편하게 사용하는 기술</h2>\n<ul>\n<li>SQL Mapper\n<ul>\n<li>장점\n<ul>\n<li>SQL의 응답 결과를 객체로 편리하게 변환해준다.</li>\n<li>JDBC의 반복되는 코드를 제거해준다.</li>\n</ul>\n</li>\n<li>단점\n<ul>\n<li>개발자가 SQL을 직접 작성해야 한다.</li>\n</ul>\n</li>\n<li>대표적인 예시\n<ul>\n<li>Spring JdbcTemplate, MyBatis</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>ORM\n<ul>\n<li>객체를 관계형 DB 테이블과 매핑해주는 기술</li>\n<li>장점\n<ul>\n<li>SQL을 직접 작성하지 않아도 된다.</li>\n</ul>\n</li>\n<li>단점\n<ul>\n<li>높은 학습 비용</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2>DB Connection 획득</h2>\n<ul>\n<li>Server -> DB 드라이버 -> DB\n<ul>\n<li>DB 드라이버를 통해 커넥션 조회</li>\n<li>DB 드라이버 &#x3C;-> DB (TCP/IP 연결)\n<ul>\n<li>3 way handshaking</li>\n</ul>\n</li>\n<li>서버 : ID/PW 부가정보 전달</li>\n<li>DB 드라이버: 인증 완료 + 세션 생성\n<ul>\n<li>response Connection</li>\n<li>앞으로 해당 커넥션을 통한 모든 동작은 세션에서 실행(SQL 실행)\n<ul>\n<li>(트랜잭션 시작-커밋-롤백 동작)</li>\n<li>커넥션을 닫거나, DB 쪽에서 세션 강제 종료시 세션은 종료</li>\n<li>커넥션 1개당 세션 1개 생성</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>많은 비용</li>\n</ul>\n</li>\n</ul>\n<h3>DataSource</h3>\n<ul>\n<li>자바 진영 인터페이스 - 커넥션 획득하는 방법을 추상화</li>\n<li>설정과 사용 책임 분리</li>\n</ul>\n<h3>Connection Pool</h3>\n<ul>\n<li>위의 커넥션을 미리 획득(시스템 스펙에 따라 10개 ~ 그 이상)</li>\n<li>서버는 미리 획득한 커넥션 객체를 바로 사용 가능</li>\n<li>사용한 커넥션은 연결이 살아있는 상태로 커넥션 풀에 다시 반환 (재사용)</li>\n<li>주로 오픈소스 사용 - (보통 HikariCP)</li>\n</ul>\n<h3>JDBC -> JdbcTemplate</h3>\n<ul>\n<li>as-is</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MemberDao</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">DataSource</span> dataSource<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MemberDao</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DataSource</span> dataSource<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dataSource <span class=\"token operator\">=</span> dataSource<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Connection</span> <span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> dataSource<span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Member</span> <span class=\"token function\">findById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> memberId<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span> sql <span class=\"token operator\">=</span> <span class=\"token string\">\"select * from members where member_id = ?\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">PreparedStatement</span> pstmt <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ResultSet</span> rs <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            connection <span class=\"token operator\">=</span> <span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            pstmt <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">prepareStatement</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            pstmt<span class=\"token punctuation\">.</span><span class=\"token function\">setString</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> memberId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            rs <span class=\"token operator\">=</span> pstmt<span class=\"token punctuation\">.</span><span class=\"token function\">executeQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">Member</span> member <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                member<span class=\"token punctuation\">.</span><span class=\"token function\">setMember_id</span><span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"member_id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                member<span class=\"token punctuation\">.</span><span class=\"token function\">setMoney</span><span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">.</span><span class=\"token function\">getInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"money\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> member<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NoSuchElementException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"member not found\"</span> <span class=\"token operator\">+</span> memberId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[MemberRepository][findById] error\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">throw</span> e<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>connection<span class=\"token punctuation\">,</span> pstmt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>\n<p>JDBC를 그냥 사용하면 불편한점</p>\n<ul>\n<li>반복되는 자원 정리로 인한 Try-Catch 구문</li>\n<li>DB마다 다른 예외처리(SQLException)</li>\n</ul>\n</li>\n<li>\n<p>스프링의 해결</p>\n<ul>\n<li>템플릿 콜백 패턴을 사용하여 Try-Catch 반복 문제 해결</li>\n<li>데이터 접근 계층에 대해 일관된 예외 추상화를 제공해준다.\n<ul>\n<li>특정 DB 기술에 종속적이지 않게 되었다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>to-be</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MemberDao</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">JdbcTemplate</span> template<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MemberDao</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DataSource</span> dataSource<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>template <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JdbcTemplate</span><span class=\"token punctuation\">(</span>dataSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">RowMapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">memberRowMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">,</span> rowNum<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Member</span> member <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            member<span class=\"token punctuation\">.</span><span class=\"token function\">setMember_id</span><span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"member_id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            member<span class=\"token punctuation\">.</span><span class=\"token function\">setMoney</span><span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">.</span><span class=\"token function\">getInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"money\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> member<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Member</span> <span class=\"token function\">findById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> memberId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span> sql <span class=\"token operator\">=</span> <span class=\"token string\">\"select * from members where member_id = ?\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> template<span class=\"token punctuation\">.</span><span class=\"token function\">queryForObject</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">,</span> <span class=\"token function\">memberRowMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> memberId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"JDBC의 등장과 한계","summary":"JDBC 이야기","date":"2021.05.16.","categories":["JDBC"]}}}]}},"pageContext":{"slug":"/2023-04-10/JDBC의 한계와 대안 기술/"}},"staticQueryHashes":[],"slicesMap":{}}
{"componentChunkName":"component---src-templates-post-template-tsx","path":"/2023-04-15/트랜잭션 개념과 스프링에 적용하기/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<h2>트랜잭션</h2>\n<h3>ACID</h3>\n<ul>\n<li>원자성: 모두 성공 혹은 모두 실패 (하나의 작업처럼)</li>\n<li>일관성: 일관성 있는 DB 상태 유지</li>\n<li>격리성: 서로 다른 트랜잭션 간의 간섭, 영향 X\n<ul>\n<li>동시에 같은 데이터를 수정하지 못하도록 격리</li>\n<li>동시성 관련 성능 이슈\n<ul>\n<li>트랜잭션 격리 수준 설정 가능</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>지속성: 트랜잭션이 끝나면 항상 그 결과가 기록되어야 한다.\n<ul>\n<li>문제 발생시 로그 등을 확인하여 복구도 가능해야 한다.</li>\n</ul>\n</li>\n</ul>\n<h3>트랜잭션 격리 수준</h3>\n<ul>\n<li>멀티스레드 환경 - 동시성</li>\n<li>ANSI 표준 - 4단계 수준으로 격리\n<ul>\n<li>READ UNCOMMITTED(커밋되지 않은 읽기)\n<ul>\n<li>성능은 좋지만, 아직 데이터 변경중인데 다른 트랜잭션에서 변경할 우려가 있음</li>\n</ul>\n</li>\n<li>READ COMMITTED(커밋된 읽기)\n<ul>\n<li>일반적으로 많이 사용</li>\n<li>커밋 완료된 데이터만 읽기 가능</li>\n</ul>\n</li>\n<li>REPEATABLE READ(반복 가능한 읽기)</li>\n<li>SERIALIZABLE(직렬화 가능)</li>\n</ul>\n</li>\n<li>단계가 높아질수록 DB 성능은 저하, 대신 격리성 보장은 상향</li>\n</ul>\n<h3>트랜잭션 도중</h3>\n<ul>\n<li>데이터를 변경(등록, 수정, 삭제)하고 아직 커밋하기 전이라면?\n<ul>\n<li>해당 세션 사용자에게만 변경된 데이터가 보이고 (임시 저장된)</li>\n<li>다른 세션에서는 변경 전 데이터가 보인다 (정합성)</li>\n</ul>\n</li>\n<li>변경된 데이터를 커밋하지 않고(수동 커밋모드) 놔두면?\n<ul>\n<li>설정된 타임아웃 시간이 지나면 자동으로 롤백됨</li>\n</ul>\n</li>\n<li>Default 설정 : 자동 커밋</li>\n<li>트랜잭션을 시작한다는 코드의 의미 : 수동 커밋 전환</li>\n</ul>\n<h3>트랜잭션 적용 in Application</h3>\n<ul>\n<li>어느 계층에서 시작해야 되나요?\n<ul>\n<li>서비스계층\n<ul>\n<li>서비스계층 내부 비즈니스 계층에서 문제 발생시 롤백이 필요</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>어떻게 시작해야 되나요?\n<ul>\n<li>커넥션 객체 필요\n<ul>\n<li>트랜잭션을 수행하는 동안 같은 커넥션에 연결이 유지되어야 함\n<ul>\n<li>그래야 같은 세션 사용 가능</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>서비스계층에서 커넥션을 만들고 트랜잭션 커밋 후 커넥션 종료해야 함</li>\n<li>그러러면 서비스계층에서 만든 커넥션을 비즈니스 로직 도중 close 하면 안된다.\n<ul>\n<li>finally\n<ul>\n<li>모든 비즈니스 로직이 종료된 후, 서비스 계층에서 커넥션을 close 한다.</li>\n<li>주의할 점은 커넥션을 닫기 전 다시 auto commit 상태로 돌려놔야 한다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>서비스계층에서 트랜잭션 도중 예외 발생시 롤백을 수행한다. (catch 문)</li>\n</ul>\n</li>\n<li>트랜잭션 도중에 1차 캐시?\n<ul>\n<li>트랜잭션 도중에만 발생하는 캐시가 있다.</li>\n<li>커밋되면 캐시 삭제</li>\n<li>실무에서 이것으로 크게 성능 차이를 내거나 하진 않는다</li>\n<li>JPA는 기본 DB 락 기능이 모두 지원되며 나아가 낙관적 락이라는 기술도 제공한다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RequiredArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MemberService</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">DataSource</span> dataSource<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">MemberRepository</span> memberRepository<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">transferAccount</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> fromId<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> toId<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> money<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> dataSource<span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            connection<span class=\"token punctuation\">.</span><span class=\"token function\">setAutoCommit</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//트랜잭션 시작</span>\n            <span class=\"token comment\">//비즈니스 로직</span>\n            <span class=\"token function\">bizLogic</span><span class=\"token punctuation\">(</span>connection<span class=\"token punctuation\">,</span> fromId<span class=\"token punctuation\">,</span> toId<span class=\"token punctuation\">,</span> money<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            connection<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//성공시 커밋</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            connection<span class=\"token punctuation\">.</span><span class=\"token function\">rollback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//실패시 롤백</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalStateException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">release</span><span class=\"token punctuation\">(</span>connection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Raw 한 JDBC 코드를 서비스 계층에 두면 불편한 점</h3>\n<ul>\n<li>반복되는 커넥션 객체 얻는 로직, 특정 DB 기술에 종속</li>\n<li>반복되는 try-catch-finally 문 (트랜잭션 시작 - 롤백 - 커밋)</li>\n<li>순수한 서비스 계층에 JDBC 코드 섞임</li>\n<li>트랜잭션을 위해 커넥션을 계속 파라미터로 보내줘야 함</li>\n<li>데이터 접근 계층에서 발생한 예외가 서비스 계층으로 전파 (SQL Exception)</li>\n</ul>\n<h3>그리하여 위 문제를 Spring에서 해결한 방법은..</h3>\n<ul>\n<li>각기 달랐던 트랜잭션 코드를 추상화\n<ul>\n<li>트랜잭션 동기화 매니저 제공</li>\n<li>트랜잭션 매니저 -> 트랜잭션 동기화 매니저에 커넥션 보관</li>\n<li>리포지토리는 트랜잭션 동기화 매니저에 접근하여 보관된 커넥션 사용</li>\n<li>트랜잭션 종료 : 트랜잭션 매니저 -> 보관된 커넥션을 사용하여 close()</li>\n<li>멀티스레드 환경에서, 쓰레드 로컬을 사용하여 커넥션 동기화 가능\n<ul>\n<li>커넥션 파라미터로 보내줘야 하는 문제 해결</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RequiredArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MemberService</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">PlatformTransactionManager</span> transactionManager<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">MemberRepository</span> memberRepository<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">transferAccount</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> fromId<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> toId<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> money<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">TransactionStatus</span> status <span class=\"token operator\">=</span> transactionManager<span class=\"token punctuation\">.</span><span class=\"token function\">getTransaction</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultTransactionDefinition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">//비즈니스 로직</span>\n            <span class=\"token function\">bizLogic</span><span class=\"token punctuation\">(</span>fromId<span class=\"token punctuation\">,</span> toId<span class=\"token punctuation\">,</span> money<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            transactionManager<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//성공시 커밋</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            transactionManager<span class=\"token punctuation\">.</span><span class=\"token function\">rollback</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//실패시 롤백</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalStateException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>트랜잭션 템플릿 제공\n<ul>\n<li>반복되는 패턴(try-catch-finally) 문제 해결</li>\n<li>템플릿-콜백 패턴</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MemberService</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">TransactionTemplate</span> txTemplate<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">MemberRepository</span> memberRepository<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MemberService</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PlatformTransactionManager</span> txManager<span class=\"token punctuation\">,</span> <span class=\"token class-name\">MemberRepository</span> memberRepository<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>txTemplate <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TransactionTemplate</span><span class=\"token punctuation\">(</span>txManager<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>memberRepository <span class=\"token operator\">=</span> memberRepository<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">transferAccount</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> fromId<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> toId<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> money<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        txTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">executeWithoutResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">//비즈니스 로직</span>\n                <span class=\"token function\">bizLogic</span><span class=\"token punctuation\">(</span>fromId<span class=\"token punctuation\">,</span> toId<span class=\"token punctuation\">,</span> money<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalStateException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>트랜잭션 프록시 제공(AOP)</li>\n<li>프록시 객체는 트랜잭션 로직 처리</li>\n<li>물론 관련 객체는 자동으로 빈으로 등록</li>\n<li>프록시 호출 -> 프록시가 Service 로직 호출\n<ul>\n<li>트랜잭션 처리하는 객체와 비즈니스 로직 처리하는 객체(Service)</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MemberService</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">MemberRepository</span> memberRepository<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MemberService</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MemberRepository</span> memberRepository<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>memberRepository <span class=\"token operator\">=</span> memberRepository<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Transactional</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">transferAccount</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> fromId<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> toId<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> money<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">bizLogic</span><span class=\"token punctuation\">(</span>fromId<span class=\"token punctuation\">,</span> toId<span class=\"token punctuation\">,</span> money<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"트랜잭션 개념과 스프링에 적용하기","summary":"스프링에서 트랜잭션 사용","date":"2023.04.15.","categories":["Spring"]}}}]}},"pageContext":{"slug":"/2023-04-15/트랜잭션 개념과 스프링에 적용하기/"}},"staticQueryHashes":[],"slicesMap":{}}